{"ast":null,"code":"var _jsxFileName = \"/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/home/index.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Table, Tabs, Rate, Icon, Divider, Radio, message, Modal, Button } from 'antd';\nconst {\n  confirm\n} = Modal;\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n};\nexport default (() => {\n  const [taskList, setTaskList] = useState([]);\n  const [reload, setReload] = useState(0);\n  const [activeTab, setActiveTab] = useState('todo');\n  const [current, setCurrent] = useState(1);\n  useEffect(() => {\n    /*const today = moment().format('YYYY-MM-DD');\n    axios.post('http://localhost:3232/api/task/queryByDate/home', {\n      start: `${today} 00:00:00`,\n      end: `${today} 23:59:59`,*/\n    axios.post('http://localhost:3232/api/task/list', {\n      status: activeTab,\n      current\n    }).then(res => {\n      if (res.data.code === 200) {\n        setTaskList(res.data.data.list || []);\n      }\n    });\n  }, [reload]);\n\n  const callback = activeKey => {\n    setActiveTab(activeKey);\n    setCurrent(1);\n  };\n\n  const handleAction = record => {\n    let keyWord = 'start',\n        params = {\n      status: 'doing'\n    };\n\n    if (record.status === 'doing') {\n      keyWord = 'finsh';\n      params = {\n        status: 'done'\n      };\n    }\n\n    let feel = 1;\n\n    const radioChange = e => {\n      feel = e.target.value;\n    };\n\n    confirm({\n      title: `Are you sure ${keyWord} this task?`,\n      content: record.status === 'doing' ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Radio.Group, {\n        onChange: radioChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"frown\",\n        className: \"frown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, \"bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"meh\",\n        className: \"meh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }, \"not bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"smile\",\n        className: \"smile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }\n      }, \"happy\")))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, \"CL\\uFF1A\"), \" \", /*#__PURE__*/React.createElement(Rate, {\n        value: record.challengeLevel,\n        tooltips: desc,\n        character: /*#__PURE__*/React.createElement(Icon, {\n          type: \"caret-up\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 93\n          }\n        }),\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 30\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, \"DL\\uFF1A\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 30\n        }\n      }, record.deadLine))) : '',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        const reqBody = { ...params,\n          feel,\n          finshedTime: moment().format('YYYY-MM-DD HH:mm:ss'),\n          _id: record._id\n        };\n\n        if (record.status === 'todo') {\n          delete reqBody.feel;\n          delete reqBody.finshedTime;\n        }\n\n        axios.post('http://localhost:3232/api/task/updateTask', reqBody).then(res => {\n          if (res.data.code === 200) {\n            message.success(`${keyWord} task success`);\n            setReload(x => x + 1);\n          }\n        });\n      }\n\n    });\n  };\n\n  const handleDelete = record => {\n    confirm({\n      title: `Are you sure delete this task?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        axios.post('http://localhost:3232/api/task/deleteTask', {\n          _id: record._id\n        }).then(res => {\n          if (res.data.code === 200) {\n            message.success(`delete task success`);\n            setReload(x => x + 1);\n          }\n        });\n      }\n\n    });\n  };\n\n  const handleFinsh = () => {\n    let feel = 1;\n\n    const radioChange = e => {\n      feel = e.target.value;\n    };\n\n    confirm({\n      title: `Finsh doday's task?`,\n      content: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Radio.Group, {\n        onChange: radioChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"frown\",\n        className: \"frown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }, \"bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"meh\",\n        className: \"meh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }, \"not bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"smile\",\n        className: \"smile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, \"happy\"))))),\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        if (feel === -1) {\n          confirm({\n            title: `To keep a good mood, I advise you to modify the plan`,\n            content: /*#__PURE__*/React.createElement(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 15\n              }\n            }, taskList.filter(x => x.status === 'doing').map((x, i) => /*#__PURE__*/React.createElement(\"p\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 35\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 38\n              }\n            }, i + 1, \". \", x.title))))\n          });\n        }\n      }\n\n    });\n  };\n\n  const columns = [{\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title'\n  }, {\n    title: 'Start Time',\n    dataIndex: 'startTime',\n    key: 'startTime'\n  }, {\n    title: 'End Time',\n    dataIndex: 'endTime',\n    key: 'endTime'\n  }, {\n    title: 'Dead Line',\n    key: 'deadLine',\n    dataIndex: 'deadLine'\n  }, {\n    title: 'Challenge Level',\n    key: 'challengeLevel',\n    dataIndex: 'challengeLevel',\n    render: value => /*#__PURE__*/React.createElement(Rate, {\n      value: value,\n      tooltips: desc,\n      character: /*#__PURE__*/React.createElement(Icon, {\n        type: \"caret-up\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 73\n        }\n      }),\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 26\n      }\n    })\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => handleAction(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, actions[record.status]), actions[record.status] && /*#__PURE__*/React.createElement(Divider, {\n      type: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 38\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => handleDelete(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }, \"Delete\"))\n  }];\n  return (\n    /*#__PURE__*/\n\n    /*<div style={{ position: 'relative' }}>\n      <Button style={{\n        left: '90%',\n        position: 'relative'\n      }} onClick={handleFinsh}>finsh</Button>\n      <Table columns={columns} dataSource={taskList} rowKey={row => row._id} />\n    </div>*/\n    React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 2\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      defaultActiveKey: activeTab,\n      activeKey: activeTab,\n      onChange: callback,\n      tabBarExtraContent: activeTab === 'doing' ? /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        onClick: handleFinsh,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 10\n        }\n      }, \"Finish\") : null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(TabPane, {\n      tab: \"DOING\",\n      key: \"doing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      columns: columns,\n      dataSource: taskList,\n      pagination: {\n        total,\n        current,\n        onChange: handlePageChange\n      },\n      rowKey: row => row._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(WrappedNewTaskForm, {\n      ref: formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 3\n      }\n    }))\n  );\n});\nconst WrappedNewTaskForm = Form.create({\n  name: 'newTask'\n})(NewTaskForm);","map":{"version":3,"sources":["/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/home/index.js"],"names":["React","useRef","useEffect","useState","axios","moment","Table","Tabs","Rate","Icon","Divider","Radio","message","Modal","Button","confirm","desc","actions","todo","doing","done","taskList","setTaskList","reload","setReload","activeTab","setActiveTab","current","setCurrent","post","status","then","res","data","code","list","callback","activeKey","handleAction","record","keyWord","params","feel","radioChange","e","target","value","title","content","challengeLevel","deadLine","okText","okType","cancelText","onOk","reqBody","finshedTime","format","_id","success","x","handleDelete","handleFinsh","filter","map","i","columns","dataIndex","key","render","text","total","onChange","handlePageChange","row","formRef","WrappedNewTaskForm","Form","create","name","NewTaskForm"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { Table, Tabs, Rate, Icon, Divider, Radio, message, Modal, Button } from 'antd'\n\nconst { confirm } = Modal;\n\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n}\n\nexport default () => {\n  const [taskList, setTaskList] = useState([])\n  const [reload, setReload] = useState(0)\n  const [activeTab, setActiveTab] = useState('todo')\n  const [current, setCurrent] = useState(1)\n\n  useEffect(() => {\n    /*const today = moment().format('YYYY-MM-DD');\n    axios.post('http://localhost:3232/api/task/queryByDate/home', {\n      start: `${today} 00:00:00`,\n      end: `${today} 23:59:59`,*/\n      axios.post('http://localhost:3232/api/task/list', {\n        status: activeTab,\n        current\n    })\n      .then((res) => {\n        if (res.data.code === 200) {\n          setTaskList(res.data.data.list || [])\n        }\n      })\n  }, [reload])\n\n  const callback = (activeKey) => {\n    setActiveTab(activeKey)\n    setCurrent(1)\n  }\n\n  const handleAction = (record) => {\n    let keyWord = 'start',\n      params = { status: 'doing' };\n    if (record.status === 'doing') {\n      keyWord = 'finsh'\n      params = {\n        status: 'done'\n      }\n    }\n    let feel = 1\n    const radioChange = e => {\n      feel = e.target.value\n    }\n    confirm({\n      title: `Are you sure ${keyWord} this task?`,\n      content: record.status === 'doing' ? (\n        <div>\n          <Radio.Group onChange={radioChange} >\n            <div className='feel'>\n              <div className='feel-item'>\n                <Icon type=\"frown\" className='frown' />\n                <Radio value={-1}>bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"meh\" className='meh' />\n                <Radio value={0}>not bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"smile\" className='smile' />\n                <Radio value={1}>happy</Radio>\n              </div>\n            </div>\n          </Radio.Group>\n          <div>\n            <span>CL：</span> <Rate value={record.challengeLevel} tooltips={desc} character={<Icon type=\"caret-up\" />} disabled />\n          </div>\n          <div>\n            <span>DL：</span> <span>{record.deadLine}</span>\n          </div>\n        </div>\n      ) : '',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        const reqBody = {\n          ...params,\n          feel,\n          finshedTime: moment().format('YYYY-MM-DD HH:mm:ss'),\n          _id: record._id\n        }\n        if (record.status === 'todo') {\n          delete reqBody.feel\n          delete reqBody.finshedTime\n        }\n        axios.post('http://localhost:3232/api/task/updateTask', reqBody).then(res => {\n          if (res.data.code === 200) {\n            message.success(`${keyWord} task success`)\n            setReload(x => x + 1)\n          }\n        })\n      },\n    });\n  }\n\n  const handleDelete = (record) => {\n    confirm({\n      title: `Are you sure delete this task?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        axios.post('http://localhost:3232/api/task/deleteTask', { _id: record._id }).then(res => {\n          if (res.data.code === 200) {\n            message.success(`delete task success`)\n            setReload(x => x + 1)\n          }\n        })\n      },\n    });\n  }\n\n  const handleFinsh = () => {\n\n    let feel = 1\n    const radioChange = e => {\n      feel = e.target.value\n    }\n    confirm({\n      title: `Finsh doday's task?`,\n      content: (\n        <div>\n          <Radio.Group onChange={radioChange} >\n            <div className='feel'>\n              <div className='feel-item'>\n                <Icon type=\"frown\" className='frown' />\n                <Radio value={-1}>bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"meh\" className='meh' />\n                <Radio value={0}>not bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"smile\" className='smile' />\n                <Radio value={1}>happy</Radio>\n              </div>\n            </div>\n          </Radio.Group>\n        </div>\n      ),\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        if (feel === -1) {\n          confirm({\n            title: `To keep a good mood, I advise you to modify the plan`,\n            content: (\n              <div>\n                {taskList\n                  .filter(x => x.status === 'doing')\n                  .map((x, i) => (<p><span>{i + 1}. {x.title}</span></p>))\n                }\n              </div>\n            )\n          })\n        }\n      },\n    });\n  }\n\n  const columns = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: 'Start Time',\n      dataIndex: 'startTime',\n      key: 'startTime',\n    },\n    {\n      title: 'End Time',\n      dataIndex: 'endTime',\n      key: 'endTime',\n    },\n    {\n      title: 'Dead Line',\n      key: 'deadLine',\n      dataIndex: 'deadLine',\n    },\n    {\n      title: 'Challenge Level',\n      key: 'challengeLevel',\n      dataIndex: 'challengeLevel',\n      render: (value) => <Rate value={value} tooltips={desc} character={<Icon type=\"caret-up\" />} disabled />\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (text, record) => (\n        <span>\n          <a onClick={() => handleAction(record)}>{actions[record.status]}</a>\n          {actions[record.status] && <Divider type=\"vertical\" />}\n          <a onClick={() => handleDelete(record)}>Delete</a>\n        </span>\n      ),\n    },\n  ];\n\n  return (\n    /*<div style={{ position: 'relative' }}>\n      <Button style={{\n        left: '90%',\n        position: 'relative'\n      }} onClick={handleFinsh}>finsh</Button>\n      <Table columns={columns} dataSource={taskList} rowKey={row => row._id} />\n    </div>*/\n <div>\n    <Tabs\n    defaultActiveKey={activeTab}\n    activeKey={activeTab}\n    onChange={callback}\n    tabBarExtraContent={\n      activeTab === 'doing' ?\n        (<Button type=\"primary\" onClick={handleFinsh} >\n          Finish\n        </Button>)\n        : null}>\n    <TabPane tab=\"DOING\" key=\"doing\">\n      <Table columns={columns} dataSource={taskList} pagination={{ total, current, onChange: handlePageChange }} rowKey={row => row._id} />\n    </TabPane>\n  </Tabs>\n  <WrappedNewTaskForm ref={formRef} />\n\n  </div>\n  )\n}\nconst WrappedNewTaskForm = Form.create({ name: 'newTask' })(NewTaskForm);"]},"metadata":{},"sourceType":"module"}