{"ast":null,"code":"var _jsxFileName = \"/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/calender/index.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Calendar, Badge, Modal, Icon, Button, Form, Input, DatePicker, Rate, message } from 'antd';\nimport moment from 'moment';\nimport RenderIf from '../../../../../components/render-if';\nimport './index.css';\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  confirm\n} = Modal;\n\nconst noop = ({\n  value\n}) => {\n  const current = value.clone();\n  const localeData = value.localeData();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, localeData.monthsShort(current));\n};\n\nconst getDayTask = (day, taskList) => {\n  return taskList.filter(item => day.isSame(item.finshedTime, 'day'));\n};\n\nconst Review = () => {\n  const [taskList, setTaskList] = useState([]);\n  const [month, setMonth] = useState(moment().month());\n  const [editTask, setEditTask] = useState(null);\n  const [showModel, setShowModel] = useState(false);\n  const [reload, setReload] = useState(0);\n  const formRef = useRef();\n\n  const handleChange = e => {\n    setMonth(e.month());\n  };\n\n  useEffect(() => {\n    axios.post('http://localhost:3232/api/task/queryByDate/calender', {\n      // status: 'done',\n      start: moment().month(month).startOf('month').format('YYYY-MM-DD'),\n      end: moment().month(month).endOf('month').format('YYYY-MM-DD')\n    }).then(res => {\n      if (res.data.code === 200) {\n        setTaskList((res.data.data.list || []).filter(x => !x.deleteAtCalender));\n      }\n    });\n  }, [month]);\n\n  const showTask = task => {\n    const feels = {\n      '-1': /*#__PURE__*/React.createElement(Icon, {\n        type: \"frown\",\n        className: \"frown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }),\n      '0': /*#__PURE__*/React.createElement(Icon, {\n        type: \"meh\",\n        className: \"meh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 12\n        }\n      }),\n      '1': /*#__PURE__*/React.createElement(Icon, {\n        type: \"smile\",\n        className: \"smile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 12\n        }\n      })\n    };\n\n    const handleEdit = () => {\n      setShowModel(true);\n      setEditTask(task);\n    };\n\n    const handleDelete = () => {\n      confirm({\n        title: `Are you sure delete this task from calender?`,\n        okText: 'Yes',\n        okType: 'danger',\n        cancelText: 'No',\n\n        onOk() {\n          axios.post('http://localhost:3232/api/task/updateTask', {\n            _id: task._id,\n            deleteAtCalender: true\n          }).then(res => {\n            if (res.data.code === 200) {\n              message.success(`delete task success`);\n              setReload(x => x + 1);\n            }\n          });\n        }\n\n      });\n    };\n\n    confirm({\n      title: 'Task Detial',\n      icon: null,\n      cancelText: null,\n      content: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"task-detial-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 43\n        }\n      }, \"title:\"), task.title), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"task-detial-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 43\n        }\n      }, \"startTime:\"), task.startTime), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"task-detial-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 43\n        }\n      }, \"endTime:\"), task.endTime), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"task-detial-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 43\n        }\n      }, \"status:\"), task.status), /*#__PURE__*/React.createElement(RenderIf, {\n        condition: task.status === 'done',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"task-detial-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 45\n        }\n      }, \"finshedTime:\"), task.finshedTime), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"task-detial-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 45\n        }\n      }, \"feel:\"), feels[task.feel])), /*#__PURE__*/React.createElement(RenderIf, {\n        condition: task.status !== 'done',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          marginRight: 10\n        },\n        onClick: handleEdit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, \"edit\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: handleDelete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, \"delete\")))\n    });\n  };\n\n  function renderCell(date) {\n    const statusMap = {\n      '-1': 'error',\n      '0': 'warning',\n      '1': 'success'\n    };\n    const list = getDayTask(date, taskList);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"task-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, list.slice(0, 5).map(x => /*#__PURE__*/React.createElement(\"span\", {\n      key: x._id,\n      onClick: () => showTask(x),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 36\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      status: statusMap[x.feel] || 'processing',\n      text: x.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 82\n      }\n    }))), list.length > 6 && '...');\n  }\n\n  const handleOk = () => {\n    formRef.current.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n\n      const newTask = { ...editTask,\n        ...fieldsValue,\n        startTime: fieldsValue['rangePicker'][0].format('YYYY-MM-DD HH:mm:ss'),\n        endTime: fieldsValue['rangePicker'][1].format('YYYY-MM-DD HH:mm:ss'),\n        deadLine: fieldsValue['deadLine'].format('YYYY-MM-DD HH:mm:ss')\n      };\n      axios.post('http://localhost:3232/api/task/updateTask', newTask).then(res => {\n        if (res.data.code === 200) {\n          message.success('update task success');\n          setShowModel(false);\n          setReload(x => x + 1);\n        } else {\n          message.error('new task failed, please try again later!');\n        }\n      });\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"site-calendar-demo-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"calendar-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Calendar, {\n    fullscreen: true,\n    dateCellRender: renderCell,\n    onChange: handleChange // headerRender={noop}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Modal, {\n    title: \"Edit Task\",\n    visible: showModel,\n    style: {\n      width: 800\n    },\n    onOk: handleOk,\n    onCancel: () => setShowModel(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(WrappedNewTaskForm, {\n    ref: formRef,\n    initData: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst NewTaskForm = ({\n  form: {\n    getFieldDecorator\n  },\n  initData\n}) => {\n  const formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 6\n      },\n      sm: {\n        span: 6\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 16\n      },\n      sm: {\n        span: 16\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('title', {\n    rules: [{\n      type: 'string',\n      required: true,\n      message: 'Please input title!'\n    }],\n    initialValue: initData.title\n  })( /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 12\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"RangePicker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('rangePicker', {\n    initialValue: [moment(initData.startTime), moment(initData.endTime)],\n    rules: [{\n      type: 'array',\n      required: true,\n      message: 'Please select start time and end time!'\n    }]\n  })( /*#__PURE__*/React.createElement(RangePicker, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 12\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Dead Line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('deadLine', {\n    initialValue: moment(initData.deadLine),\n    rules: [{\n      type: 'object',\n      required: true,\n      message: 'Please select dead line!'\n    }]\n  })( /*#__PURE__*/React.createElement(DatePicker, {\n    showTime: true,\n    format: \"YYYY-MM-DD HH:mm:ss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Challenge Level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('challengeLevel', {\n    initialValue: initData.challengeLevel,\n    rules: [{\n      type: 'number',\n      required: true,\n      message: 'Please select challenge level!'\n    }]\n  })( /*#__PURE__*/React.createElement(Rate, {\n    tooltips: desc,\n    character: /*#__PURE__*/React.createElement(Icon, {\n      type: \"caret-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 44\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n};\nconst WrappedNewTaskForm = Form.create({\n  name: 'newTask'\n})(NewTaskForm);\nexport default Review;","map":{"version":3,"sources":["/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/calender/index.js"],"names":["React","useEffect","useState","useRef","axios","Calendar","Badge","Modal","Icon","Button","Form","Input","DatePicker","Rate","message","moment","RenderIf","RangePicker","confirm","noop","value","current","clone","localeData","monthsShort","getDayTask","day","taskList","filter","item","isSame","finshedTime","Review","setTaskList","month","setMonth","editTask","setEditTask","showModel","setShowModel","reload","setReload","formRef","handleChange","e","post","start","startOf","format","end","endOf","then","res","data","code","list","x","deleteAtCalender","showTask","task","feels","handleEdit","handleDelete","title","okText","okType","cancelText","onOk","_id","success","icon","content","startTime","endTime","status","feel","marginRight","renderCell","date","statusMap","slice","map","length","handleOk","validateFields","err","fieldsValue","newTask","deadLine","error","width","NewTaskForm","form","getFieldDecorator","initData","formItemLayout","labelCol","xs","span","sm","wrapperCol","rules","type","required","initialValue","challengeLevel","desc","actions","todo","doing","done","WrappedNewTaskForm","create","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,QADF,EACYC,KADZ,EACmBC,KADnB,EAC0BC,IAD1B,EACgCC,MADhC,EAEEC,IAFF,EAEQC,KAFR,EAEeC,UAFf,EAE2BC,IAF3B,EAEiCC,OAFjC,QAGO,MAHP;AAIA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AAEA,OAAO,aAAP;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAkBL,UAAxB;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAcX,KAApB;;AAEA,MAAMY,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC1B,QAAMC,OAAO,GAAGD,KAAK,CAACE,KAAN,EAAhB;AACA,QAAMC,UAAU,GAAGH,KAAK,CAACG,UAAN,EAAnB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,UAAU,CAACC,WAAX,CAAuBH,OAAvB,CADH,CADF;AAKD,CARD;;AAUA,MAAMI,UAAU,GAAG,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACpC,SAAOA,QAAQ,CAACC,MAAT,CAAgBC,IAAI,IAAIH,GAAG,CAACI,MAAJ,CAAWD,IAAI,CAACE,WAAhB,EAA6B,KAA7B,CAAxB,CAAP;AACD,CAFD;;AAIA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM,CAACL,QAAD,EAAWM,WAAX,IAA0B/B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACgC,KAAD,EAAQC,QAAR,IAAoBjC,QAAQ,CAACa,MAAM,GAAGmB,KAAT,EAAD,CAAlC;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACoC,SAAD,EAAYC,YAAZ,IAA4BrC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACsC,MAAD,EAASC,SAAT,IAAsBvC,QAAQ,CAAC,CAAD,CAApC;AAEA,QAAMwC,OAAO,GAAGvC,MAAM,EAAtB;;AAEA,QAAMwC,YAAY,GAAIC,CAAD,IAAO;AAC1BT,IAAAA,QAAQ,CAACS,CAAC,CAACV,KAAF,EAAD,CAAR;AACD,GAFD;;AAIAjC,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,KAAK,CAACyC,IAAN,CAAW,qDAAX,EAAkE;AAChE;AACAC,MAAAA,KAAK,EAAE/B,MAAM,GAAGmB,KAAT,CAAeA,KAAf,EAAsBa,OAAtB,CAA8B,OAA9B,EAAuCC,MAAvC,CAA8C,YAA9C,CAFyD;AAGhEC,MAAAA,GAAG,EAAElC,MAAM,GAAGmB,KAAT,CAAeA,KAAf,EAAsBgB,KAAtB,CAA4B,OAA5B,EAAqCF,MAArC,CAA4C,YAA5C;AAH2D,KAAlE,EAKGG,IALH,CAKSC,GAAD,IAAS;AACb,UAAIA,GAAG,CAACC,IAAJ,CAASC,IAAT,KAAkB,GAAtB,EAA2B;AACzBrB,QAAAA,WAAW,CAAC,CAACmB,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcE,IAAd,IAAsB,EAAvB,EAA2B3B,MAA3B,CAAkC4B,CAAC,IAAE,CAACA,CAAC,CAACC,gBAAxC,CAAD,CAAX;AACD;AACF,KATH;AAUD,GAXQ,EAWN,CAACvB,KAAD,CAXM,CAAT;;AAaA,QAAMwB,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAMC,KAAK,GAAG;AACZ,yBAAM,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADM;AAEZ,wBAAK,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,KAAX;AAAiB,QAAA,SAAS,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFO;AAGZ,wBAAK,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,SAAS,EAAC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHO,KAAd;;AAMA,UAAMC,UAAU,GAAG,MAAM;AACvBtB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,MAAAA,WAAW,CAACsB,IAAD,CAAX;AACD,KAHD;;AAKA,UAAMG,YAAY,GAAC,MAAI;AACrB5C,MAAAA,OAAO,CAAC;AACN6C,QAAAA,KAAK,EAAG,8CADF;AAENC,QAAAA,MAAM,EAAE,KAFF;AAGNC,QAAAA,MAAM,EAAE,QAHF;AAINC,QAAAA,UAAU,EAAE,IAJN;;AAKNC,QAAAA,IAAI,GAAG;AACL/D,UAAAA,KAAK,CAACyC,IAAN,CAAW,2CAAX,EAAwD;AAAEuB,YAAAA,GAAG,EAAET,IAAI,CAACS,GAAZ;AAAgBX,YAAAA,gBAAgB,EAAC;AAAjC,WAAxD,EAAiGN,IAAjG,CAAsGC,GAAG,IAAI;AAC3G,gBAAIA,GAAG,CAACC,IAAJ,CAASC,IAAT,KAAkB,GAAtB,EAA2B;AACzBxC,cAAAA,OAAO,CAACuD,OAAR,CAAiB,qBAAjB;AACA5B,cAAAA,SAAS,CAACe,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAT;AACD;AACF,WALD;AAMD;;AAZK,OAAD,CAAP;AAcD,KAfD;;AAiBAtC,IAAAA,OAAO,CAAC;AACN6C,MAAAA,KAAK,EAAE,aADD;AAENO,MAAAA,IAAI,EAAE,IAFA;AAGNJ,MAAAA,UAAU,EAAE,IAHN;AAINK,MAAAA,OAAO,eACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAhC,EAAoDZ,IAAI,CAACI,KAAzD,CADF,eAEE;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAhC,EAAwDJ,IAAI,CAACa,SAA7D,CAFF,eAGE;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAhC,EAAsDb,IAAI,CAACc,OAA3D,CAHF,eAIE;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAhC,EAAqDd,IAAI,CAACe,MAA1D,CAJF,eAKE,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAEf,IAAI,CAACe,MAAL,KAAgB,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAhC,EAA0Df,IAAI,CAAC5B,WAA/D,CADF,eAEE;AAAG,QAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAhC,EAAmD6B,KAAK,CAACD,IAAI,CAACgB,IAAN,CAAxD,CAFF,CALF,eASE,oBAAC,QAAD;AAAU,QAAA,SAAS,EAAEhB,IAAI,CAACe,MAAL,KAAgB,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AACbE,UAAAA,WAAW,EAAE;AADA,SAAf;AAEG,QAAA,OAAO,EAAEf,UAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,CATF;AALI,KAAD,CAAP;AAsBD,GAnDD;;AAsDA,WAASe,UAAT,CAAoBC,IAApB,EAA0B;AAExB,UAAMC,SAAS,GAAG;AAChB,YAAM,OADU;AAEhB,WAAK,SAFW;AAGhB,WAAK;AAHW,KAAlB;AAKA,UAAMxB,IAAI,GAAG9B,UAAU,CAACqD,IAAD,EAAOnD,QAAP,CAAvB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG4B,IAAI,CAACyB,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,GAAjB,CAAqBzB,CAAC,iBAAI;AAAM,MAAA,GAAG,EAAEA,CAAC,CAACY,GAAb;AAAkB,MAAA,OAAO,EAAE,MAAMV,QAAQ,CAACF,CAAD,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA8C,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEuB,SAAS,CAACvB,CAAC,CAACmB,IAAH,CAAT,IAAqB,YAApC;AAAkD,MAAA,IAAI,EAAEnB,CAAC,CAACO,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9C,CAA1B,CADH,EAEGR,IAAI,CAAC2B,MAAL,GAAc,CAAd,IAAmB,KAFtB,CADF;AAMD;;AAED,QAAMC,QAAQ,GAAG,MAAM;AACrBzC,IAAAA,OAAO,CAACrB,OAAR,CAAgB+D,cAAhB,CAA+B,CAACC,GAAD,EAAMC,WAAN,KAAsB;AACnD,UAAID,GAAJ,EAAS;AACP;AACD;;AACD,YAAME,OAAO,GAAG,EACd,GAAGnD,QADW;AAEd,WAAGkD,WAFW;AAGdd,QAAAA,SAAS,EAAEc,WAAW,CAAC,aAAD,CAAX,CAA2B,CAA3B,EAA8BtC,MAA9B,CAAqC,qBAArC,CAHG;AAIdyB,QAAAA,OAAO,EAAEa,WAAW,CAAC,aAAD,CAAX,CAA2B,CAA3B,EAA8BtC,MAA9B,CAAqC,qBAArC,CAJK;AAKdwC,QAAAA,QAAQ,EAAEF,WAAW,CAAC,UAAD,CAAX,CAAwBtC,MAAxB,CAA+B,qBAA/B;AALI,OAAhB;AAQA5C,MAAAA,KAAK,CAACyC,IAAN,CAAW,2CAAX,EAAwD0C,OAAxD,EACGpC,IADH,CACSC,GAAD,IAAS;AACb,YAAIA,GAAG,CAACC,IAAJ,CAASC,IAAT,KAAkB,GAAtB,EAA2B;AACzBxC,UAAAA,OAAO,CAACuD,OAAR,CAAgB,qBAAhB;AACA9B,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,SAAS,CAACe,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAT;AACD,SAJD,MAIO;AACL1C,UAAAA,OAAO,CAAC2E,KAAR,CAAc,0CAAd;AACD;AACF,OATH;AAUD,KAtBD;AAuBD,GAxBD;;AA0BA,sBACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AACE,IAAA,UAAU,EAAE,IADd;AAEE,IAAA,cAAc,EAAEZ,UAFlB;AAGE,IAAA,QAAQ,EAAElC,YAHZ,CAIA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eASE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,OAAO,EAAEL,SAFX;AAGE,IAAA,KAAK,EAAE;AAAEoD,MAAAA,KAAK,EAAE;AAAT,KAHT;AAIE,IAAA,IAAI,EAAEP,QAJR;AAKE,IAAA,QAAQ,EAAE,MAAM5C,YAAY,CAAC,KAAD,CAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,kBAAD;AAAoB,IAAA,GAAG,EAAEG,OAAzB;AAAkC,IAAA,QAAQ,EAAEN,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CATF,CADF;AAoBD,CA9ID;;AAgJA,MAAMuD,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA;AAAF,GAAR;AAA+BC,EAAAA;AAA/B,CAAD,KAA+C;AACjE,QAAMC,cAAc,GAAG;AACrBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,EAAE,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADI;AAERC,MAAAA,EAAE,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAFI,KADW;AAKrBE,IAAAA,UAAU,EAAE;AACVH,MAAAA,EAAE,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADM;AAEVC,MAAAA,EAAE,EAAE;AAAED,QAAAA,IAAI,EAAE;AAAR;AAFM;AALS,GAAvB;AAWA,sBACE,oBAAC,IAAD,oBAAUH,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,iBAAiB,CAAC,OAAD,EAAU;AAC1BQ,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,QAAQ,EAAE,IAA5B;AAAkCzF,MAAAA,OAAO,EAAE;AAA3C,KAAD,CADmB;AAE1B0F,IAAAA,YAAY,EAAEV,QAAQ,CAAC/B;AAFG,GAAV,CAAjB,eAGE,oBAAC,KAAD;AACD,IAAA,WAAW,EAAC,OADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADH,CADF,eASE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG8B,iBAAiB,CAAC,aAAD,EAAgB;AAChCW,IAAAA,YAAY,EAAE,CAACzF,MAAM,CAAC+E,QAAQ,CAACtB,SAAV,CAAP,EAA6BzD,MAAM,CAAC+E,QAAQ,CAACrB,OAAV,CAAnC,CADkB;AAEhC4B,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,QAAQ,EAAE,IAA3B;AAAiCzF,MAAAA,OAAO,EAAE;AAA1C,KAAD;AAFyB,GAAhB,CAAjB,eAGE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADH,CATF,eAeE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG+E,iBAAiB,CAAC,UAAD,EAAa;AAC7BW,IAAAA,YAAY,EAAEzF,MAAM,CAAC+E,QAAQ,CAACN,QAAV,CADS;AAE7Ba,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,QAAQ,EAAE,IAA5B;AAAkCzF,MAAAA,OAAO,EAAE;AAA3C,KAAD;AAFsB,GAAb,CAAjB,eAIC,oBAAC,UAAD;AAAY,IAAA,QAAQ,MAApB;AAAqB,IAAA,MAAM,EAAC,qBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,CADH,CAfF,eA8BE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG+E,iBAAiB,CAAC,gBAAD,EAAmB;AACnCW,IAAAA,YAAY,EAAEV,QAAQ,CAACW,cADY;AAEnCJ,IAAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBC,MAAAA,QAAQ,EAAE,IAA5B;AAAkCzF,MAAAA,OAAO,EAAE;AAA3C,KAAD;AAF4B,GAAnB,CAAjB,eAIC,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAE4F,IAAhB;AAAsB,IAAA,SAAS,eAAE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJD,CADH,CA9BF,CADF;AAyCD,CArDD;;AAuDA,MAAMA,IAAI,GAAG,CAAC,WAAD,EAAc,MAAd,EAAsB,KAAtB,EAA6B,MAA7B,EAAqC,WAArC,CAAb;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,OADQ;AAEdC,EAAAA,KAAK,EAAE,QAFO;AAGdC,EAAAA,IAAI,EAAE;AAHQ,CAAhB;AAMA,MAAMC,kBAAkB,GAAGrG,IAAI,CAACsG,MAAL,CAAY;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAZ,EAAiCtB,WAAjC,CAA3B;AAEA,eAAe3D,MAAf","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport axios from 'axios'\nimport {\n  Calendar, Badge, Modal, Icon, Button,\n  Form, Input, DatePicker, Rate, message\n} from 'antd';\nimport moment from 'moment'\nimport RenderIf from '../../../../../components/render-if'\n\nimport './index.css'\n\nconst { RangePicker } = DatePicker;\nconst { confirm } = Modal;\n\nconst noop = ({ value }) => {\n  const current = value.clone();\n  const localeData = value.localeData();\n  return (\n    <div className='calendar-header'>\n      {localeData.monthsShort(current)}\n    </div>\n  )\n}\n\nconst getDayTask = (day, taskList) => {\n  return taskList.filter(item => day.isSame(item.finshedTime, 'day'))\n}\n\nconst Review = () => {\n  const [taskList, setTaskList] = useState([])\n  const [month, setMonth] = useState(moment().month())\n  const [editTask, setEditTask] = useState(null)\n  const [showModel, setShowModel] = useState(false)\n  const [reload, setReload] = useState(0)\n\n  const formRef = useRef()\n\n  const handleChange = (e) => {\n    setMonth(e.month())\n  }\n\n  useEffect(() => {\n    axios.post('http://localhost:3232/api/task/queryByDate/calender', {\n      // status: 'done',\n      start: moment().month(month).startOf('month').format('YYYY-MM-DD'),\n      end: moment().month(month).endOf('month').format('YYYY-MM-DD'),\n    })\n      .then((res) => {\n        if (res.data.code === 200) {\n          setTaskList((res.data.data.list || []).filter(x=>!x.deleteAtCalender))\n        }\n      })\n  }, [month])\n\n  const showTask = (task) => {\n    const feels = {\n      '-1': <Icon type=\"frown\" className='frown' />,\n      '0': <Icon type=\"meh\" className='meh' />,\n      '1': <Icon type=\"smile\" className='smile' />\n    }\n\n    const handleEdit = () => {\n      setShowModel(true)\n      setEditTask(task)\n    }\n\n    const handleDelete=()=>{\n      confirm({\n        title: `Are you sure delete this task from calender?`,\n        okText: 'Yes',\n        okType: 'danger',\n        cancelText: 'No',\n        onOk() {\n          axios.post('http://localhost:3232/api/task/updateTask', { _id: task._id,deleteAtCalender:true }).then(res => {\n            if (res.data.code === 200) {\n              message.success(`delete task success`)\n              setReload(x => x + 1)\n            }\n          })\n        },\n      });\n    }\n\n    confirm({\n      title: 'Task Detial',\n      icon: null,\n      cancelText: null,\n      content: (\n        <div>\n          <p className='task-detial-item'><span>title:</span>{task.title}</p>\n          <p className='task-detial-item'><span>startTime:</span>{task.startTime}</p>\n          <p className='task-detial-item'><span>endTime:</span>{task.endTime}</p>\n          <p className='task-detial-item'><span>status:</span>{task.status}</p>\n          <RenderIf condition={task.status === 'done'}>\n            <p className='task-detial-item'><span>finshedTime:</span>{task.finshedTime}</p>\n            <p className='task-detial-item'><span>feel:</span>{feels[task.feel]}</p>\n          </RenderIf>\n          <RenderIf condition={task.status !== 'done'}>\n            <Button style={{\n              marginRight: 10\n            }} onClick={handleEdit}>edit</Button>\n            <Button onClick={handleDelete}>delete</Button>\n          </RenderIf>\n        </div>),\n    });\n  }\n\n\n  function renderCell(date) {\n\n    const statusMap = {\n      '-1': 'error',\n      '0': 'warning',\n      '1': 'success'\n    }\n    const list = getDayTask(date, taskList)\n    return (\n      <div className='task-list'>\n        {list.slice(0, 5).map(x => <span key={x._id} onClick={() => showTask(x)}><Badge status={statusMap[x.feel] || 'processing'} text={x.title} /></span>)}\n        {list.length > 6 && '...'}\n      </div>\n    )\n  }\n\n  const handleOk = () => {\n    formRef.current.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n      const newTask = {\n        ...editTask,\n        ...fieldsValue,\n        startTime: fieldsValue['rangePicker'][0].format('YYYY-MM-DD HH:mm:ss'),\n        endTime: fieldsValue['rangePicker'][1].format('YYYY-MM-DD HH:mm:ss'),\n        deadLine: fieldsValue['deadLine'].format('YYYY-MM-DD HH:mm:ss'),\n      }\n\n      axios.post('http://localhost:3232/api/task/updateTask', newTask)\n        .then((res) => {\n          if (res.data.code === 200) {\n            message.success('update task success')\n            setShowModel(false)\n            setReload(x => x + 1)\n          } else {\n            message.error('new task failed, please try again later!')\n          }\n        })\n    })\n  }\n\n  return (\n    <div className='site-calendar-demo-card'>\n      <div className='calendar-item'>\n        <Calendar\n          fullscreen={true}\n          dateCellRender={renderCell}\n          onChange={handleChange}\n        // headerRender={noop}\n        />\n      </div>\n      <Modal\n        title=\"Edit Task\"\n        visible={showModel}\n        style={{ width: 800 }}\n        onOk={handleOk}\n        onCancel={() => setShowModel(false)}\n      >\n        <WrappedNewTaskForm ref={formRef} initData={editTask} />\n      </Modal>\n    </div>)\n}\n\nconst NewTaskForm = ({ form: { getFieldDecorator }, initData }) => {\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 6 },\n      sm: { span: 6 },\n    },\n    wrapperCol: {\n      xs: { span: 16 },\n      sm: { span: 16 },\n    },\n  };\n\n  return (\n    <Form {...formItemLayout} >\n      <Form.Item label=\"Title\">\n        {getFieldDecorator('title', {\n          rules: [{ type: 'string', required: true, message: 'Please input title!' }],\n          initialValue: initData.title\n        })(<Input\n          placeholder=\"Title\"\n        />)}\n      </Form.Item>\n      <Form.Item label=\"RangePicker\">\n        {getFieldDecorator('rangePicker', {\n          initialValue: [moment(initData.startTime), moment(initData.endTime)],\n          rules: [{ type: 'array', required: true, message: 'Please select start time and end time!' }],\n        })(<RangePicker />)}\n      </Form.Item>\n      <Form.Item label=\"Dead Line\">\n        {getFieldDecorator('deadLine', {\n          initialValue: moment(initData.deadLine),\n          rules: [{ type: 'object', required: true, message: 'Please select dead line!' }],\n        })(\n          <DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />,\n        )}\n      </Form.Item>\n      {/* <Form.Item label=\"Repeat\">\n        {getFieldDecorator('repeat', {\n          rules: [{ type: 'boolean', message: 'Please select repeat or not!' }],\n        })(\n          <Checkbox />,\n        )}\n      </Form.Item> */}\n      <Form.Item label=\"Challenge Level\">\n        {getFieldDecorator('challengeLevel', {\n          initialValue: initData.challengeLevel,\n          rules: [{ type: 'number', required: true, message: 'Please select challenge level!' }],\n        })(\n          <Rate tooltips={desc} character={<Icon type=\"caret-up\" />} />\n        )}\n      </Form.Item>\n    </Form>\n  );\n}\n\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n}\n\nconst WrappedNewTaskForm = Form.create({ name: 'newTask' })(NewTaskForm);\n\nexport default Review"]},"metadata":{},"sourceType":"module"}