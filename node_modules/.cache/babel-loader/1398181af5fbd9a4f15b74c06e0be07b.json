{"ast":null,"code":"var _jsxFileName = \"/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/home/index.js\";\nimport React, { useState, useRef, Tag, useEffect } from 'react';\nimport { Tabs, Table, Divider, DatePicker, Form, Button, Modal, Input, Checkbox, Rate, Icon, message, Radio } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport './index.css';\nconst {\n  confirm\n} = Modal;\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  TabPane\n} = Tabs;\nconst level = {\n  '-2': 'Terrible',\n  '-1': 'Bad',\n  '0': 'Normal',\n  '1': 'Good',\n  '2': 'Excellent'\n};\nexport default (() => {\n  const [showModel, setShowModel] = useState(false);\n  const [reload, setReload] = useState(0);\n  const [taskList, setTaskList] = useState([]);\n  const [current, setCurrent] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [activeTab, setActiveTab] = useState('todo');\n  const formRef = useRef();\n  useEffect(() => {\n    axios.post('http://localhost:3232/api/task/list', {\n      status: activeTab,\n      current\n    }).then(res => {\n      if (res.data.code === 200) {\n        setTaskList(res.data.data.list || []);\n        setTotal(res.data.data.total || 0);\n      }\n    });\n  }, [activeTab, reload, current]);\n\n  const callback = activeKey => {\n    setActiveTab(activeKey);\n    setCurrent(1);\n  };\n\n  const newTask = () => {\n    setShowModel(true);\n  };\n\n  const handlePageChange = value => {\n    setCurrent(value);\n  };\n  /*const handleOk = () => {\n     formRef.current.validateFields((err, fieldsValue) => {\n       if (err) {\n         return;\n       }\n       const newTask = {\n         ...fieldsValue,\n         startTime: fieldsValue['rangePicker'][0].format('YYYY-MM-DD HH:mm:ss'),\n         endTime: fieldsValue['rangePicker'][1].format('YYYY-MM-DD HH:mm:ss'),\n         deadLine: fieldsValue['deadLine'].format('YYYY-MM-DD HH:mm:ss'),\n         status: 'todo'\n       }\n        axios.post('http://localhost:3232/api/task/add', newTask)\n         .then((res) => {\n           if (res.data.code === 200) {\n             message.success('new task success')\n             setShowModel(false)\n             setReload(x => x + 1)\n           } else {\n             message.error('new task failed, please try again later!')\n           }\n         })\n     })\n   }*/\n\n\n  const handleAction = record => {\n    let keyWord = 'start',\n        params = {\n      status: 'doing'\n    };\n\n    if (record.status === 'doing') {\n      keyWord = 'finsh';\n      params = {\n        status: 'done'\n      };\n    }\n\n    let feel = 1;\n\n    const radioChange = e => {\n      feel = e.target.value;\n    };\n\n    confirm({\n      title: `Are you sure ${keyWord} this task?`,\n      content: record.status === 'doing' ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Radio.Group, {\n        onChange: radioChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"frown\",\n        className: \"frown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }, \"bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"meh\",\n        className: \"meh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }\n      }, \"not bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"smile\",\n        className: \"smile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }, \"happy\")))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, \"CL\\uFF1A\"), \" \", /*#__PURE__*/React.createElement(Rate, {\n        value: record.challengeLevel,\n        tooltips: desc,\n        character: /*#__PURE__*/React.createElement(Icon, {\n          type: \"caret-up\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 93\n          }\n        }),\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 30\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, \"DL\\uFF1A\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 30\n        }\n      }, record.deadLine))) : '',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        const reqBody = { ...params,\n          feel,\n          finshedTime: moment().format('YYYY-MM-DD HH:mm:ss'),\n          _id: record._id\n        };\n\n        if (record.status === 'todo') {\n          delete reqBody.feel;\n          delete reqBody.finshedTime;\n        }\n\n        axios.post('http://localhost:3232/api/task/updateTask', reqBody).then(res => {\n          if (res.data.code === 200) {\n            message.success(`${keyWord} task success`);\n            setReload(x => x + 1);\n          }\n        });\n      }\n\n    });\n  };\n\n  const handleFinsh = () => {\n    let feel = 1;\n\n    const radioChange = e => {\n      feel = e.target.value;\n    };\n\n    confirm({\n      title: `Finsh doday's task?`,\n      content: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Radio.Group, {\n        onChange: radioChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"frown\",\n        className: \"frown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }\n      }, \"bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"meh\",\n        className: \"meh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      }, \"not bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"smile\",\n        className: \"smile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }\n      }, \"happy\"))))),\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        if (feel === -1) {\n          confirm({\n            title: `To keep a good mood during working, the suggestion is to modify tomorrow's plan`,\n            content: /*#__PURE__*/React.createElement(\"div\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 15\n              }\n            }, taskList.filter(x => x.status === 'doing' && x.challengeLevel > 3).map((x, i) => /*#__PURE__*/React.createElement(\"p\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 35\n              }\n            }, /*#__PURE__*/React.createElement(\"span\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 38\n              }\n            }, i + 1, \". \", x.title))))\n          });\n        }\n      }\n\n    });\n  };\n\n  const handleDelete = record => {\n    confirm({\n      title: `Are you sure delete this task?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        /*axios.post('http://localhost:3232/api/task/deleteTask', { _id: record._id }).then(res => {\n          if (res.data.code === 200) {\n            message.success(`delete task success`)\n            setReload(x => x + 1)\n          }\n        })*/\n        setTaskList(list => filter(x._id != record._id));\n      }\n\n    });\n  };\n\n  const columns = [{\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title' //render: text => <a>{text}</a>,\n\n  }, {\n    title: 'Start Time',\n    dataIndex: 'startTime',\n    key: 'startTime'\n  }, {\n    title: 'End Time',\n    dataIndex: 'endTime',\n    key: 'endTime'\n  }, {\n    title: 'Dead Line',\n    key: 'deadLine',\n    dataIndex: 'deadLine'\n  }, // {\n  //   title: 'Repeat',\n  //   key: 'repeat',\n  //   dataIndex: 'repeat',\n  //   render: (text, record) => <span>{text ? 'YES' : 'NO'}</span>\n  // },\n  {\n    title: 'Challenge Level',\n    key: 'challengeLevel',\n    dataIndex: 'challengeLevel',\n    render: value => /*#__PURE__*/React.createElement(Rate, {\n      value: value,\n      tooltips: desc,\n      character: /*#__PURE__*/React.createElement(Icon, {\n        type: \"caret-up\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 73\n        }\n      }),\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 26\n      }\n    })\n  }, {\n    title: 'Grade',\n    key: 'challengeLevel',\n    dataIndex: 'challengeLevel',\n    render: (value, item) => {\n      if (item.status !== 'done') return null;\n      return level[item.feel + (moment(item.finshedTime).isBefore(item.daedLine) ? 1 : -1)];\n    }\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => handleAction(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }\n    }, actions[record.status]), actions[record.status] && /*#__PURE__*/React.createElement(Divider, {\n      type: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 38\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => handleDelete(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }\n    }, \"Delete\"))\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    defaultActiveKey: activeTab,\n    activeKey: activeTab,\n    onChange: callback,\n    tabBarExtraContent: activeTab === 'doing' ? /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: handleFinsh,\n      disabled: showModel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 14\n      }\n    }, \"FInish Today's Plan\") : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Daily plan\",\n    key: \"doing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: taskList,\n    pagination: {\n      total,\n      current,\n      onChange: handlePageChange\n    },\n    rowKey: row => row._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Modal, {\n    title: \"finishDailyPlan\",\n    visible: showModel,\n    style: {\n      width: 800\n    } // onOk={handleOk}\n    ,\n    onCancel: () => setShowModel(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(WrappedNewTaskForm, {\n    ref: formRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 8\n    }\n  })));\n});\n\nconst NewTaskForm = ({\n  form: {\n    getFieldDecorator\n  }\n}) => {\n  const formItemLayout = {\n    labelCol: {\n      xs: {\n        span: 6\n      },\n      sm: {\n        span: 6\n      }\n    },\n    wrapperCol: {\n      xs: {\n        span: 16\n      },\n      sm: {\n        span: 16\n      }\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n\n      console.log(fieldsValue);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Form, Object.assign({}, formItemLayout, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('title', {\n    rules: [{\n      type: 'string',\n      required: true,\n      message: 'Please input title!'\n    }]\n  })( /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 12\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"RangePicker\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('rangePicker', {\n    rules: [{\n      type: 'array',\n      required: true,\n      message: 'Please select start time and end time!'\n    }]\n  })( /*#__PURE__*/React.createElement(RangePicker, {\n    showTime: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 12\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Dead Line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('deadLine', {\n    rules: [{\n      type: 'object',\n      required: true,\n      message: 'Please select dead line!'\n    }]\n  })( /*#__PURE__*/React.createElement(DatePicker, {\n    showTime: true,\n    format: \"YYYY-MM-DD HH:mm:ss\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Challenge Level\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }\n  }, getFieldDecorator('challengeLevel', {\n    rules: [{\n      type: 'number',\n      required: true,\n      message: 'Please select challenge level!'\n    }]\n  })( /*#__PURE__*/React.createElement(Rate, {\n    tooltips: desc,\n    character: /*#__PURE__*/React.createElement(Icon, {\n      type: \"caret-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 44\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 11\n    }\n  }))));\n};\n\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n};\nconst WrappedNewTaskForm = Form.create({\n  name: 'newTask'\n})(NewTaskForm);","map":{"version":3,"sources":["/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/home/index.js"],"names":["React","useState","useRef","Tag","useEffect","Tabs","Table","Divider","DatePicker","Form","Button","Modal","Input","Checkbox","Rate","Icon","message","Radio","axios","moment","confirm","RangePicker","TabPane","level","showModel","setShowModel","reload","setReload","taskList","setTaskList","current","setCurrent","total","setTotal","activeTab","setActiveTab","formRef","post","status","then","res","data","code","list","callback","activeKey","newTask","handlePageChange","value","handleAction","record","keyWord","params","feel","radioChange","e","target","title","content","challengeLevel","desc","deadLine","okText","okType","cancelText","onOk","reqBody","finshedTime","format","_id","success","x","handleFinsh","filter","map","i","handleDelete","columns","dataIndex","key","render","item","isBefore","daedLine","text","actions","onChange","row","width","NewTaskForm","form","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","handleSubmit","preventDefault","props","validateFields","err","fieldsValue","console","log","rules","type","required","todo","doing","done","WrappedNewTaskForm","create","name"],"mappings":"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","sourcesContent":["import React, { useState, useRef, Tag, useEffect } from 'react';\nimport {\n  Tabs, Table, Divider,\n  DatePicker, Form, Button,\n  Modal, Input, Checkbox,\n  Rate, Icon\n  , message,\n  Radio\n} from 'antd';\nimport axios from 'axios'\nimport moment from 'moment'\n\nimport './index.css'\n\nconst { confirm } = Modal;\nconst { RangePicker } = DatePicker;\nconst { TabPane } = Tabs;\n\nconst level = { '-2': 'Terrible', '-1': 'Bad', '0': 'Normal', '1': 'Good', '2': 'Excellent' }\n\nexport default () => {\n  const [showModel, setShowModel] = useState(false)\n  const [reload, setReload] = useState(0)\n  const [taskList, setTaskList] = useState([])\n  const [current, setCurrent] = useState(1)\n  const [total, setTotal] = useState(0)\n\n  const [activeTab, setActiveTab] = useState('todo')\n  const formRef = useRef()\n\n  useEffect(() => {\n    axios.post('http://localhost:3232/api/task/list', {\n      status: activeTab,\n      current\n    })\n      .then((res) => {\n        if (res.data.code === 200) {\n          setTaskList(res.data.data.list || [])\n          setTotal(res.data.data.total || 0)\n        }\n      })\n  }, [activeTab, reload, current])\n\n  const callback = (activeKey) => {\n    setActiveTab(activeKey)\n    setCurrent(1)\n  }\n  const newTask = () => {\n    setShowModel(true)\n  }\n\n  const handlePageChange = (value) => {\n    setCurrent(value)\n  }\n\n /*const handleOk = () => {\n    formRef.current.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n      const newTask = {\n        ...fieldsValue,\n        startTime: fieldsValue['rangePicker'][0].format('YYYY-MM-DD HH:mm:ss'),\n        endTime: fieldsValue['rangePicker'][1].format('YYYY-MM-DD HH:mm:ss'),\n        deadLine: fieldsValue['deadLine'].format('YYYY-MM-DD HH:mm:ss'),\n        status: 'todo'\n      }\n\n      axios.post('http://localhost:3232/api/task/add', newTask)\n        .then((res) => {\n          if (res.data.code === 200) {\n            message.success('new task success')\n            setShowModel(false)\n            setReload(x => x + 1)\n          } else {\n            message.error('new task failed, please try again later!')\n          }\n        })\n    })\n  }*/\n\n  const handleAction = (record) => {\n    let keyWord = 'start',\n      params = { status: 'doing' };\n    if (record.status === 'doing') {\n      keyWord = 'finsh'\n      params = {\n        status: 'done'\n      }\n    }\n    let feel = 1\n    const radioChange = e => {\n      feel = e.target.value\n    }\n    confirm({\n      title: `Are you sure ${keyWord} this task?`,\n      content: record.status === 'doing' ? (\n        <div>\n          <Radio.Group onChange={radioChange} >\n            <div className='feel'>\n              <div className='feel-item'>\n                <Icon type=\"frown\" className='frown' />\n                <Radio value={-1}>bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"meh\" className='meh' />\n                <Radio value={0}>not bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"smile\" className='smile' />\n                <Radio value={1}>happy</Radio>\n              </div>\n            </div>\n          </Radio.Group>\n          <div>\n            <span>CL：</span> <Rate value={record.challengeLevel} tooltips={desc} character={<Icon type=\"caret-up\" />} disabled />\n          </div>\n          <div>\n            <span>DL：</span> <span>{record.deadLine}</span>\n          </div>\n        </div>\n      ) : '',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        const reqBody = {\n          ...params,\n          feel,\n          finshedTime: moment().format('YYYY-MM-DD HH:mm:ss'),\n          _id: record._id\n        }\n        if (record.status === 'todo') {\n          delete reqBody.feel\n          delete reqBody.finshedTime\n        }\n        axios.post('http://localhost:3232/api/task/updateTask', reqBody).then(res => {\n          if (res.data.code === 200) {\n            message.success(`${keyWord} task success`)\n            setReload(x => x + 1)\n          }\n        })\n      },\n    });\n  }\n\n  const handleFinsh = () => {\n\n    let feel = 1\n    const radioChange = e => {\n      feel = e.target.value\n    }\n    confirm({\n      title: `Finsh doday's task?`,\n      content: (\n        <div>\n          <Radio.Group onChange={radioChange} >\n            <div className='feel'>\n              <div className='feel-item'>\n                <Icon type=\"frown\" className='frown' />\n                <Radio value={-1}>bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"meh\" className='meh' />\n                <Radio value={0}>not bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"smile\" className='smile' />\n                <Radio value={1}>happy</Radio>\n              </div>\n            </div>\n          </Radio.Group>\n        </div>\n      ),\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        if (feel === -1) {\n          confirm({\n            title: `To keep a good mood during working, the suggestion is to modify tomorrow's plan`,\n            content: (\n              <div>\n                {taskList\n                  .filter(x => x.status === 'doing' && x.challengeLevel>3 )\n                  .map((x, i) => (<p><span>{i + 1}. {x.title}</span></p>))\n                }\n              </div>\n            )\n          })\n        }\n      },\n    });\n  }\n\n  const handleDelete = (record) => {\n    confirm({\n      title: `Are you sure delete this task?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        /*axios.post('http://localhost:3232/api/task/deleteTask', { _id: record._id }).then(res => {\n          if (res.data.code === 200) {\n            message.success(`delete task success`)\n            setReload(x => x + 1)\n          }\n        })*/\n        setTaskList(list => filter(x._id != record._id))\n      },\n    });\n  }\n\n  const columns = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n      //render: text => <a>{text}</a>,\n    },\n    {\n      title: 'Start Time',\n      dataIndex: 'startTime',\n      key: 'startTime',\n    },\n    {\n      title: 'End Time',\n      dataIndex: 'endTime',\n      key: 'endTime',\n    },\n    {\n      title: 'Dead Line',\n      key: 'deadLine',\n      dataIndex: 'deadLine',\n    },\n    // {\n    //   title: 'Repeat',\n    //   key: 'repeat',\n    //   dataIndex: 'repeat',\n    //   render: (text, record) => <span>{text ? 'YES' : 'NO'}</span>\n    // },\n    {\n      title: 'Challenge Level',\n      key: 'challengeLevel',\n      dataIndex: 'challengeLevel',\n      render: (value) => <Rate value={value} tooltips={desc} character={<Icon type=\"caret-up\" />} disabled />\n    },\n    {\n      title: 'Grade',\n      key: 'challengeLevel',\n      dataIndex: 'challengeLevel',\n      render: (value, item) => {\n        if (item.status !== 'done') return null\n        return level[item.feel + (moment(item.finshedTime).isBefore(item.daedLine) ? 1 : -1)]\n      }\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (text, record) => (\n        <span>\n          <a onClick={() => handleAction(record)}>{actions[record.status]}</a>\n          {actions[record.status] && <Divider type=\"vertical\" />}\n          <a onClick={() => handleDelete(record)}>Delete</a>\n        </span>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <Tabs\n        defaultActiveKey={activeTab}\n        activeKey={activeTab}\n        onChange={callback}\n        tabBarExtraContent={\n          activeTab === 'doing' ?\n            (<Button type=\"primary\" onClick={handleFinsh} disabled={showModel}>\n              FInish Today's Plan\n            </Button>)\n            : null}>\n\n        <TabPane tab=\"Daily plan\" key=\"doing\">\n          <Table columns={columns} dataSource={taskList} pagination={{ total, current, onChange: handlePageChange }} rowKey={row => row._id} />\n        </TabPane>\n\n      </Tabs>\n      <Modal\n        title=\"finishDailyPlan\"\n        visible={showModel}\n        style={{ width: 800 }}\n       // onOk={handleOk}\n        onCancel={() => setShowModel(false)}\n      >\n       <WrappedNewTaskForm ref={formRef} />\n      </Modal>\n    </div>\n  )\n}\n\nconst NewTaskForm = ({ form: { getFieldDecorator } }) => {\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 6 },\n      sm: { span: 6 },\n    },\n    wrapperCol: {\n      xs: { span: 16 },\n      sm: { span: 16 },\n    },\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.form.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n      console.log(fieldsValue)\n    })\n  }\n\n\n  return (\n    <Form {...formItemLayout} onSubmit={handleSubmit}>\n      <Form.Item label=\"Title\">\n        {getFieldDecorator('title', {\n          rules: [{ type: 'string', required: true, message: 'Please input title!' }],\n        })(<Input\n          placeholder=\"Title\"\n        />)}\n      </Form.Item>\n      <Form.Item label=\"RangePicker\">\n        {getFieldDecorator('rangePicker', {\n          rules: [{ type: 'array', required: true, message: 'Please select start time and end time!' }],\n        })(<RangePicker showTime />)}\n      </Form.Item>\n      <Form.Item label=\"Dead Line\">\n        {getFieldDecorator('deadLine', {\n          rules: [{ type: 'object', required: true, message: 'Please select dead line!' }],\n        })(\n          <DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />,\n        )}\n      </Form.Item>\n      {/* <Form.Item label=\"Repeat\">\n        {getFieldDecorator('repeat', {\n          rules: [{ type: 'boolean', message: 'Please select repeat or not!' }],\n        })(\n          <Checkbox />,\n        )}\n      </Form.Item> */}\n      <Form.Item label=\"Challenge Level\">\n        {getFieldDecorator('challengeLevel', {\n          rules: [{ type: 'number', required: true, message: 'Please select challenge level!' }],\n        })(\n          <Rate tooltips={desc} character={<Icon type=\"caret-up\" />} />\n        )}\n      </Form.Item>\n    </Form>\n  );\n}\n\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n}\n\nconst WrappedNewTaskForm = Form.create({ name: 'newTask' })(NewTaskForm);"]},"metadata":{},"sourceType":"module"}