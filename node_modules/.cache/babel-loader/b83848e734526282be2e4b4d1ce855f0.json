{"ast":null,"code":"var _jsxFileName = \"/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/home/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { Table, Rate, Icon, Divider, Radio, message, Modal } from 'antd';\nconst {\n  confirm\n} = Modal;\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n};\nexport default (() => {\n  const [taskList, setTaskList] = useState([]);\n  const [reload, setReload] = useState(0); //  const [current, setCurrent] = useState(1)\n\n  useEffect(() => {\n    const today = moment().format('YYYY-MM-DD');\n    axios.post('http://localhost:3232/api/task/queryByDate/home', {\n      start: `${today} 00:00:00`,\n      end: `${today} 23:59:59`\n    }).then(res => {\n      if (res.data.code === 200) {\n        setTaskList(res.data.data.list || []);\n      }\n    });\n  }, [reload]);\n\n  const handleAction = record => {\n    let keyWord = 'start',\n        params = {\n      status: 'doing'\n    };\n\n    if (record.status === 'doing') {\n      keyWord = 'finsh';\n      params = {\n        status: 'done'\n      };\n    }\n\n    let feel = 1;\n\n    const radioChange = e => {\n      feel = e.target.value;\n    };\n\n    confirm({\n      title: `Are you sure ${keyWord} this task?`,\n      content: record.status === 'doing' ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Radio.Group, {\n        onChange: radioChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"frown\",\n        className: \"frown\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }\n      }, \"bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"meh\",\n        className: \"meh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }, \"not bad\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"feel-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        type: \"smile\",\n        className: \"smile\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Radio, {\n        value: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }, \"happy\")))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, \"CL\\uFF1A\"), \" \", /*#__PURE__*/React.createElement(Rate, {\n        value: record.challengeLevel,\n        tooltips: desc,\n        character: /*#__PURE__*/React.createElement(Icon, {\n          type: \"caret-up\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 93\n          }\n        }),\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 30\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      }, \"DL\\uFF1A\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 30\n        }\n      }, record.deadLine))) : '',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        const reqBody = { ...params,\n          feel,\n          finshedTime: moment().format('YYYY-MM-DD HH:mm:ss'),\n          _id: record._id\n        };\n\n        if (record.status === 'todo') {\n          delete reqBody.feel;\n          delete reqBody.finshedTime;\n        }\n\n        axios.post('http://localhost:3232/api/task/updateTask', reqBody).then(res => {\n          if (res.data.code === 200) {\n            message.success(`${keyWord} task success`);\n            setReload(x => x + 1);\n          }\n        });\n      }\n\n    });\n  };\n\n  const handleDelete = record => {\n    confirm({\n      title: `Are you sure delete this task?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n\n      onOk() {\n        //axios.post('http://localhost:3232/api/task/deleteTask', { _id: record._id }).then(res => {\n        // if (res.data.code === 200) {\n        message.success(`delete task success`); // setReload(x => x + 1)\n        //}\n        // })\n      }\n\n    });\n  };\n\n  const columns = [{\n    title: 'Title',\n    dataIndex: 'title',\n    key: 'title'\n  }, {\n    title: 'Start Time',\n    dataIndex: 'startTime',\n    key: 'startTime'\n  }, {\n    title: 'End Time',\n    dataIndex: 'endTime',\n    key: 'endTime'\n  }, {\n    title: 'Dead Line',\n    key: 'deadLine',\n    dataIndex: 'deadLine'\n  }, {\n    title: 'Challenge Level',\n    key: 'challengeLevel',\n    dataIndex: 'challengeLevel',\n    render: value => /*#__PURE__*/React.createElement(Rate, {\n      value: value,\n      tooltips: desc,\n      character: /*#__PURE__*/React.createElement(Icon, {\n        type: \"caret-up\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 73\n        }\n      }),\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 26\n      }\n    })\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => handleAction(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, actions[record.status]), actions[record.status] && /*#__PURE__*/React.createElement(Divider, {\n      type: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 38\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => handleDelete(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, \"Delete\"))\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    dataSource: taskList,\n    rowKey: row => row._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }));\n  /*return (\n    <div>\n      <Table columns={columns} dataSource={taskList} pagination={{ total, current, onChange: handlePageChange }} rowKey={row => row._id} />\n    </div>\n  )*/\n});","map":{"version":3,"sources":["/home/daisy/computer project/taskPlanner/src/pages/User/Main/components/home/index.js"],"names":["React","useEffect","useState","axios","moment","Table","Rate","Icon","Divider","Radio","message","Modal","confirm","desc","actions","todo","doing","done","taskList","setTaskList","reload","setReload","today","format","post","start","end","then","res","data","code","list","handleAction","record","keyWord","params","status","feel","radioChange","e","target","value","title","content","challengeLevel","deadLine","okText","okType","cancelText","onOk","reqBody","finshedTime","_id","success","x","handleDelete","columns","dataIndex","key","render","text","row"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport moment from 'moment'\nimport { Table, Rate, Icon, Divider, Radio, message, Modal } from 'antd'\n\nconst { confirm } = Modal;\n\nconst desc = ['very ease', 'ease', 'mid', 'hard', 'very hard'];\nconst actions = {\n  todo: 'Start',\n  doing: 'Finish',\n  done: ''\n}\n\nexport default () => {\n  const [taskList, setTaskList] = useState([])\n  const [reload, setReload] = useState(0)\n//  const [current, setCurrent] = useState(1)\n\n\n  useEffect(() => {\n    const today=moment().format('YYYY-MM-DD');\n    axios.post('http://localhost:3232/api/task/queryByDate/home', {\n      start: `${today} 00:00:00`,\n      end: `${today} 23:59:59`,\n    })\n      .then((res) => {\n        if (res.data.code === 200) {\n          setTaskList(res.data.data.list || [])\n        }\n      })\n  }, [reload])\n\n  const handleAction = (record) => {\n    let keyWord = 'start',\n      params = { status: 'doing' };\n    if (record.status === 'doing') {\n      keyWord = 'finsh'\n      params = {\n        status: 'done'\n      }\n    }\n    let feel = 1\n    const radioChange = e => {\n      feel = e.target.value\n    }\n    confirm({\n      title: `Are you sure ${keyWord} this task?`,\n      content: record.status === 'doing' ? (\n        <div>\n          <Radio.Group onChange={radioChange} >\n            <div className='feel'>\n              <div className='feel-item'>\n                <Icon type=\"frown\" className='frown' />\n                <Radio value={-1}>bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"meh\" className='meh' />\n                <Radio value={0}>not bad</Radio>\n              </div>\n              <div className='feel-item'>\n                <Icon type=\"smile\" className='smile' />\n                <Radio value={1}>happy</Radio>\n              </div>\n            </div>\n          </Radio.Group>\n          <div>\n            <span>CL：</span> <Rate value={record.challengeLevel} tooltips={desc} character={<Icon type=\"caret-up\" />} disabled />\n          </div>\n          <div>\n            <span>DL：</span> <span>{record.deadLine}</span>\n          </div>\n        </div>\n      ) : '',\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        const reqBody = {\n          ...params,\n          feel,\n          finshedTime: moment().format('YYYY-MM-DD HH:mm:ss'),\n          _id: record._id\n        }\n        if (record.status === 'todo') {\n          delete reqBody.feel\n          delete reqBody.finshedTime\n        }\n        axios.post('http://localhost:3232/api/task/updateTask', reqBody).then(res => {\n          if (res.data.code === 200) {\n            message.success(`${keyWord} task success`)\n            setReload(x => x + 1)\n          }\n        })\n      },\n    });\n  }\n\n  const handleDelete = (record) => {\n    confirm({\n      title: `Are you sure delete this task?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        //axios.post('http://localhost:3232/api/task/deleteTask', { _id: record._id }).then(res => {\n         // if (res.data.code === 200) {\n            message.success(`delete task success`)\n           // setReload(x => x + 1)\n          //}\n       // })\n      },\n    });\n  }\n\n  const columns = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: 'Start Time',\n      dataIndex: 'startTime',\n      key: 'startTime',\n    },\n    {\n      title: 'End Time',\n      dataIndex: 'endTime',\n      key: 'endTime',\n    },\n    {\n      title: 'Dead Line',\n      key: 'deadLine',\n      dataIndex: 'deadLine',\n    },\n    {\n      title: 'Challenge Level',\n      key: 'challengeLevel',\n      dataIndex: 'challengeLevel',\n      render: (value) => <Rate value={value} tooltips={desc} character={<Icon type=\"caret-up\" />} disabled />\n    },\n    {\n      title: 'Action',\n      key: 'action',\n      render: (text, record) => (\n        <span>\n          <a onClick={() => handleAction(record)}>{actions[record.status]}</a>\n          {actions[record.status] && <Divider type=\"vertical\" />}\n          <a onClick={() => handleDelete(record)}>Delete</a>\n        </span>\n      ),\n    },\n  ];\n\n return (\n    <div>\n      <Table columns={columns} dataSource={taskList} rowKey={row => row._id} />\n    </div>\n  )\n  /*return (\n    <div>\n      <Table columns={columns} dataSource={taskList} pagination={{ total, current, onChange: handlePageChange }} rowKey={row => row._id} />\n    </div>\n  )*/\n}"]},"metadata":{},"sourceType":"module"}